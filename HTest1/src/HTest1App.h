/*
-----------------------------------------------------------------------------
Filename:    HTest1.h
-----------------------------------------------------------------------------

This source file is generated by the Ogre AppWizard.

Check out: http://conglomerate.berlios.de/wiki/doku.php?id=ogrewizards

Based on the Example Framework for OGRE
(Object-oriented Graphics Rendering Engine)

Copyright (c) 2000-2007 The OGRE Team
For the latest info, see http://www.ogre3d.org/

You may use this sample code for anything you like, it is not covered by the
LGPL like the rest of the OGRE engine.
-----------------------------------------------------------------------------
*/
#ifndef __HTest1_h_
#define __HTest1_h_

#include "HKCommon.h"
#include "GHavok.h"

#include "ExampleApplication.h"
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#include "../res/resource.h"
#endif
#include <CEGUI.h>
#include <CEGUISystem.h>
#include <CEGUISchemeManager.h>
#include <OgreCEGUIRenderer.h>
#include "FrameListener.h"
#include "GDebugger.h"
#include "GOffAxisCamera.h"


class HTest1App : public ExampleApplication
{

	public:
		HTest1App() : mGUIRenderer(0), 
					  mGUISystem(0),
					  _dFOVLeft(0),
					  _dFOVRight(0),
					  _dFOVTop(0),
					  _dFOVBottom(0),
					  _bOffAxis(false),
					  _dCaveFOV(0),
					  _dCaveRoll(0),
					  _dCavePitch(0),
					  _dCaveYaw(0){
		}

	~HTest1App(){
		if(mGUISystem)
		{
			delete mGUISystem;
			mGUISystem = 0;
		}
		if(mGUIRenderer)
		{
			delete mGUIRenderer;
			mGUIRenderer = 0;
		}
	}

protected:

	virtual void createCamera(void);

	virtual bool configure(void);

	void EnableOffAxisProjection();

	// Just override the mandatory create scene method
	virtual void createScene(void);

	void testScene();

	void destroyScene();

	bool LoadIni(char *file);
	
	// Create new frame listener
	void createFrameListener(void);

	bool setup();
	void setupEventHandlers(void);

   bool handleQuit(const CEGUI::EventArgs& e);

private:
      CEGUI::OgreCEGUIRenderer* mGUIRenderer;
      CEGUI::System* mGUISystem;
	  Ogre::SceneNode *mCameraNode;

private:
	double _dFOVLeft,_dFOVRight,_dFOVTop,_dFOVBottom;
	double _dCaveRoll, _dCavePitch, _dCaveYaw;
	double _dCaveFOV;
	bool _bOffAxis;
	Ogre::Matrix4 _mOffAxis;
};

#endif // #ifndef __HTest1_h_